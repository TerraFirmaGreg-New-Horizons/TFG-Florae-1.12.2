import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "CurseMaven"
            url = "https://cursemaven.com"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3.4'
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.0"
    }
}

plugins {
    id 'java'
    id 'idea'
    id "com.github.johnrengelman.shadow" version "4.0.4"
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'

if (System.getenv('VERSION') != null) {
    version = System.getenv('VERSION')
} else {
    version = "1.5"
}

shadowJar {
	zip64 true
}

group = "tfcflorae"
archivesBaseName = "TFC-Florae"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2838"
    runDir = "run"
    mappings = "stable_39"
	
	replace("@VERSION@", project.version)
	replace("@FINGERPRINT@", project.findProperty("signSHA1"))
    replaceIn("TFCFlorae.java")
}

repositories {
    // Repositories required for dependencies, not ForgeGradle go here.
    mavenCentral()
	maven {
		name "Craftweaker"
        url "https://maven.blamejared.com"
    }
    maven {
        name = "CurseForge"
        url = "https://cursemaven.com"
    }
    removeIf { it instanceof MavenArtifactRepository && it.url.host == 'files.minecraftforge.net' }
    maven {
        url "https://maven.minecraftforge.net/"
    }
}

dependencies {
    deobfProvided "curse.maven:had-enough-items-557549:3862733"
	compile files("./libs/TerraFirmaCraft-MC1.12.2-1.7.23.181-deobf.jar")
    compile files("./libs/CraftTweaker2-1.12-4.1.20.681.jar")
    provided files("./libs/firmalife-0.5.1.jar")
    provided files("./libs/TFC-Elementia-MC1.12.2-1.7.jar")
    provided files("./libs/TFC_PH_Compat-1.12.2-1.1.1.jar")
    provided files("./libs/TFCTech-Unofficial-MC1.12.2-1.2.16.jar")
    provided files("./libs/MTLib-3.0.7.jar")
    compile fileTree(include: ["*.jar"], dir: "libs")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	
	// from the project root, include the LICENSE file
    from('.') {
        include "LICENSE.txt"
    }

    // move any Access Transformer (there is/should be only 1, but this is nice and safe) to the right folder.
    rename '(.+_at.cfg)', 'META-INF/$1'

    // Write the update's json file. This file is kept by jenkins and put in a WWW accessible folder.
    // For more info on the exact format, see Forge documentation & source code.
    /*doLast {
        //noinspection GroovyAssignabilityCheck
        def updateFile = new File('tfc.json')
        def json
        if (updateFile.exists()) {
            json = new JsonSlurper().parseText(updateFile.getText())
        } else {
            def builder = new JsonBuilder()
            json = builder(homepage: "https://tng.terrafirmacraft.com", promos: new HashMap<>()) // defaults: Again, change if you fork & release
        }
        //noinspection GroovyAssignabilityCheck
        json['promos'][project.minecraft.version + '-latest'] = project.version
        //noinspection GroovyAssignabilityCheck
        json['promos'][project.minecraft.version + '-recommended'] = project.version
        if (!json.containsKey(project.minecraft.version)) json.put(project.minecraft.version, new HashMap<>())
        //noinspection GroovyAssignabilityCheck
        def version = json[project.minecraft.version]
        //version.put(project.version, runGitCommand("log -n 1 --format='%B'"))
        updateFile.write JsonOutput.prettyPrint(JsonOutput.toJson(json)) // Pretty print cause why not, it's a small file anyway.
    }*/
}

project.tasks.withType(Jar) { jarTask -> // For all jar tasks
    jarTask.manifest {
        attributes 'FMLAT': 'tfc_at.cfg' // See FML source code
    }
    jarTask.appendix = "MC" + project.minecraft.version
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar